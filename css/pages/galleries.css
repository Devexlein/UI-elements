.wrap {
   margin: 2rem auto;
   padding: 0.5rem;
   max-width: 50rem;
   border: 1px dashed rgb(0 0 0 / 0.4);
}

.row {
   margin-inline: auto;
   display: flex;
   align-items: flex-start;
}

.item {
   background: rgb(156, 170, 251);
   aspect-ratio: var(--ratio);
   font-weight: 700;
   display: flex;
   align-items: center;
   justify-content: center;
   font-size: 2rem;
   width: 100%;
}

.item:nth-child(2) {
   background: rgb(250, 217, 159);
}

.item:nth-child(3) {
   background: rgb(159, 250, 229);
}

/* Решение №1 
   Определите соотношение сторон для строки
   4/3 + 2/3 = 6/3 */

.row_1 {
   aspect-ratio: 6/3;
   /* aspect-ratio: calc((4 / 3) + (2 / 3)); */
}

.item_1 {
   height: 100%;
}

.list_disadvantage span {
   font-weight: 700;
}

/* Решение №2    Flex-Grow
   Вместо установления ширины/высоты элементов,
   указываем им, насколько они могут увеличиваться.
   Важно установить flex-basis равным нулю и одинаковое 
   соответствующее значение для aspect-ratio (в виде дроби)
   и flex-grow (десятичное значение).
   Работает независимо от количества элементов в строке */

.row_2 {
   margin: 0.2rem auto;
   column-gap: 0.2rem;

}

.item_2 {
   flex-basis: 0;
   flex-grow: calc(var(--ratio));
}

/* .item_2:first-child {
   flex-grow: 4;
}

.item_2:last-child {
   flex-grow: 2;
} */

/* Решение №3    Flex-Grow + модификатор https: //heydonworks.com/article/the-flexbox-holy-albatross-reincarnated/
   Расширенное с добавлением модификатора, который переключает 
   значение flex-basis с нуля на очень высокое число на брейкпойнте,
   получаем сложенный макет на маленьких экранах (без промежуточного
   варианта: либо 33%, либо 100% ширины контейнера/родительского элемента) 
   и ряд изображений на больших экранах */

.row_3 {
   --modifier: calc((30rem - 100%) * 999);
   display: flex;
   flex-wrap: wrap;
   gap: 1rem;
}

.item_3 {
   flex-basis: max(var(--modifier), 0px);
   aspect-ratio: var(--ratio);
   flex-grow: calc(var(--ratio));
}

.item_3 img {
   display: block;
   width: 100%;
   height: auto;
}

/* ============================================================================================ */
:root {
   /* ↓ Use these variables to customise the albatross. */
   --centerflex-gap: 1rem;
   --centerflex-threshold: 45rem;
}

.wrap-box {
   padding: 1em;
   background: linear-gradient(-135deg, #008, #002);
   min-height: 20vh;
   color: #fff;
}

.centerflex {
   /* ↓ Save the large negative or large positive value to a variable */
   --multiplier: calc((var(--centerflex-threshold, 38rem) - 100%) * 999);

   display: flex;
   flex-wrap: wrap;
   align-items: center;
   /* ↓ Multiply by -1 to make negative */
   margin: calc(var(--centerflex-gap, 1rem) / 2 * -1) 0;
}

.centerflex::before {
   content: "";
   flex-grow: 999;
   /* ↓ If --multiplier is negative, use 0px instead */
   flex-basis: max(var(--multiplier), 0px);
}

.centerflex>* {
   flex-grow: 1;
   /* ↓ Half the value to each element, combining to make the whole */
   margin: calc(var(--centerflex-gap, 1rem) / 2) auto;
}

.centerflex>*:first-child {
   /* Drag the first child to the beginning,
      so that the pseudo element moves to the center */
   order: -1;
}

.centerflex__logo svg {
   display: block;
   max-width: 100%;
}

.centerflex__nav ul {
   display: flex;
   justify-content: center;
   flex-wrap: wrap;
   margin: -0.5em;
}

.centerflex__nav li {
   margin: 0.5em;
}